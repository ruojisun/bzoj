#include <algorithm>
#include <cstring>
#include <cstdio>
#include <queue>
 
using namespace std;
 
struct node
{
    int next,to,value;
}edge[6000006];
int deep[1000001],S,T,n,m,head[1000001],cnt=1,Answer;
void add_edge(int from,int to,int v)
{
    edge[++cnt].next=head[from];
    edge[cnt].to=to;
    edge[cnt].value=v;
    head[from]=cnt;
}
bool bfs(int s,int t)
{
    queue<int>Q;
    memset(deep,-1,sizeof(deep));
    deep[s]=0;
    Q.push(s);
    while(!Q.empty())
    {
        int tp=Q.front();
        Q.pop();
        for(int i=head[tp];i!=-1;i=edge[i].next)
        {
            int v=edge[i].to;
            if(deep[v]==-1&&edge[i].value>0)
            {
                deep[v]=deep[tp]+1;
                if(v==t) return 1;
                else Q.push(v);
            }
        }
    }
    return 0;
}
void qr(int &x)
{
    x=0;int f=1;
    char ch=getchar();
    while(ch>'9'||ch<'0')
    {
        if(ch=='-') f=-1;
        ch=getchar();
    }
    while(ch>='0'&&ch<='9')
    {
        x=x*10+(int)ch-48;
        ch=getchar();
    }
}
int dfs(int now,int to,int flow)
{
    int rest=0,f;
    if(now==to) return flow;
    for(int i=head[now];i!=-1;i=edge[i].next)
    {
        int v=edge[i].to;
        if(edge[i].value>0&&deep[v]==deep[now]+1&&(f=dfs(v,to,min(edge[i].value,flow-rest))))
        {
            rest+=f;
            edge[i].value-=f;
            edge[i^1].value+=f;
            if(rest==flow) break;
        }
    }
    if(rest!=flow) deep[now]=-1;
    return rest;
}
void Dinic(int s,int t)
{
    while(bfs(s,t))
    Answer+=dfs(s,t,1e9);
}
int main()
{
    memset(head,-1,sizeof(head));
    qr(n);qr(m);
    S=0;T=1+n*m;
    int w;
    for(int i=1;i<=n;++i)
    {
        for(int j=1;j<m;++j)
        {
            qr(w);
            add_edge(j+m*(i-1),j+m*(i-1)+1,w);
            add_edge(j+m*(i-1)+1,j+m*(i-1),w);
        }
    }
    for(int i=1;i<n;++i)
    {
        for(int j=1;j<=m;++j)
        {
            qr(w);
            add_edge(j+m*(i-1),j+m*i,w);
            add_edge(j+m*i,j+m*(i-1),w);
        }
    }
    for(int i=1;i<n;++i)
    {
        for(int j=1;j<m;++j)
        {
            qr(w);
            add_edge(j+m*(i-1),i*m+j+1,w);
            add_edge(j+m*i+1,(i-1)*m+j,w);
        }
    }
    add_edge(S,1,1e9);add_edge(1,S,1e9);
    add_edge(n*m,T,1e9);add_edge(T,n*m,1e9);
    Dinic(S,T);
    printf("%d",Answer);
    return 0;
}

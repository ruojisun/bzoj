#include <cstring>
#include <cstdio>
#include <queue>
#define N 30000
#define inf 0x3f3f3f3f
#define cl(a,b) memset(a,b,sizeof(a))
using namespace std;
int n,m,ans,cnt=1,fx[5]={1,-1,0,0},fy[5]={0,0,-1,1},to[N<<1],cur[N],dep[N],head[N],nextt[N<<1],flow[N<<1],G[105][105];
inline void ins(int u,int v,int w)
{
    nextt[++cnt]=head[u];to[cnt]=v;flow[cnt]=w;head[u]=cnt;
    nextt[++cnt]=head[v];to[cnt]=u;flow[cnt]=0;head[v]=cnt;
}
bool bfs(int S,int T)
{
    cl(dep,-1);
    queue<int>q;
    q.push(S);
    dep[S]=0;
    for(int i=S;i<=T;++i) cur[i]=head[i];
    for(int u;!q.empty();)
    {
        u=q.front();q.pop();
        for(int i=head[u];i;i=nextt[i])
        {
            int v=to[i];
            if(dep[v]==-1&&flow[i])
            {
                dep[v]=dep[u]+1;
                if(v==T) return true;
                q.push(v);
            }
        }
    }
    return false;
}
inline int min(int a,int b) {return a>b?b:a;}
int dfs(int u,int T,int limit)
{
    if(u==T||!limit) return limit;
    int f,res=0;
    for(int &i=cur[u];i;i=nextt[i])
    {
        int v=to[i];
        if(dep[v]==dep[u]+1&&flow[i]&&(f=dfs(v,T,min(limit,flow[i]))))
        {
            flow[i]-=f;
            flow[i^1]+=f;
            res+=f;
            limit-=f;
            if(!limit) break;
        }
    }
    if(res!=limit) dep[u]=-1;
    return res;
}
int main(int argc,char *argv[])
{
    scanf("%d%d",&n,&m);
    int S=0,T=n*m+1;
    for(int i=1;i<=n;++i)
     for(int j=1;j<=m;++j)
      scanf("%d",&G[i][j]);
    for(int i=1;i<=n;++i)
        for(int j=1;j<=m;++j)
        {
            if(G[i][j]==1) ins(S,(i-1)*m+j,inf);
            else if(G[i][j]==2) ins((i-1)*m+j,T,inf);
            for(int k=0;k<4;++k)
            {
                int x=i+fx[k],y=j+fy[k];
                if(x<1||x>n||y<1||y>m||G[i][j]==2) continue;
                if(G[i][j]!=1||G[x][y]!=1) ins((i-1)*m+j,(x-1)*m+y,1);
            }
        }
    while(bfs(S,T))
    ans+=dfs(S,T,inf);
    printf("%d\n",ans);
    return 0;
}

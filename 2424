#include <cstring>
#include <cstdio>
#include <queue>
#define N 10000
#define cl(a,b) memset(a,b,sizeof(a))
#define inf 0x3f3f3f3f

using namespace std;
bool vis[N];
int n,m,s,cnt=1,fa[N],to[N],val[N],came[N],flow[N],cost[N],head[N],nextt[N];
inline void ins(int u,int v,int w,int f)
{
	nextt[++cnt]=head[u];to[cnt]=v;flow[cnt]=w;cost[cnt]=f;head[u]=cnt;
	nextt[++cnt]=head[v];to[cnt]=u;flow[cnt]=0;cost[cnt]=-f;head[v]=cnt;
}
bool spfa(int S,int T)
{
	cl(vis,0);
	for(int i=S;i<=T;++i) came[i]=val[i]=inf;
	queue<int>q;
	val[S]=0;
	q.push(S);
	for(int u;!q.empty();)
	{
		u=q.front();
		q.pop();
		vis[u]=false;
		for(int i=head[u];i;i=nextt[i])
		{
			int v=to[i];
			if(val[v]>val[u]+cost[i]&&flow[i])
			{
				val[v]=val[u]+cost[i];
				came[v]=min(came[u],flow[i]);
				fa[v]=i;
				if(!vis[v])
				{
					q.push(v);
					vis[v]=1;
				}
			}
		}
	}
	return val[T]!=inf;
}
int dinic(int S,int T)
{
	int ret=0;
	for(;spfa(S,T);)
	{
		int x=came[T];
		for(int i=T;i!=S&&i;i=to[fa[i]^1])
		{
			flow[fa[i]]-=x;
			flow[fa[i]^1]+=x;
		}
		ret+=x*val[T];
	}
	return ret;
}
int main(int argc,char *argv[])
{
	scanf("%d%d%d",&n,&m,&s);
	int S=0,T=n+1;
	for(int x,i=1;i<=n;++i) scanf("%d",&x),ins(i,T,x,0);
	for(int x,i=1;i<=n;++i) scanf("%d",&x),ins(S,i,inf,x);
	for(int i=1;i<n;++i) ins(i,i+1,s,m);
	printf("%d\n",dinic(S,T));
	return 0;
}

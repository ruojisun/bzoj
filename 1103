#include <cstdio>
#define N 350000
int n,m,cnt,tim,dep[N],top[N],fa[N],siz[N],head[N],belong[N],nextt[N<<1],to[N<<1];
struct node
{
	int l,r,mid,val;
}tr[N<<2|1];
void swap(int &m,int &n)
{
	int tmp=n;
	n=m;
	m=tmp;
}
inline void ins(int u,int v)
{
	nextt[++cnt]=head[u];to[cnt]=v;head[u]=cnt;
	nextt[++cnt]=head[v];to[cnt]=u;head[v]=cnt;
}
void dfs1(int x,int pre)
{
	int pos=++tim;
	fa[x]=pre;
	dep[x]=dep[pre]+1;
	for(int i=head[x];i;i=nextt[i])
	{
		int v=to[i];
		if(v==pre) continue;
		dfs1(v,x);
	}
	siz[x]=tim-pos;
}
void dfs2(int x,int chain)
{
	belong[x]=++tim;
	int p=0;
	top[x]=chain;
	for(int i=head[x];i;i=nextt[i])
	{
		int v=to[i];
		if(fa[x]!=v&&siz[p]<siz[v]) p=v;
	}
	if(p) dfs2(p,chain);
	for(int i=head[x];i;i=nextt[i])
	{
		int v=to[i];
		if(fa[x]!=v&&v!=p) dfs2(v,v);
	}
}
inline void pushup(int k) {tr[k].val=tr[k<<1].val+tr[k<<1|1].val;}
void build(int k,int l,int r)
{
	tr[k].l=l,tr[k].r=r;
	if(l==r)
	{
		tr[k].val=(l!=1?1:0);
		return;
	}
	tr[k].mid=(l+r)>>1;
	build(k<<1,l,tr[k].mid);
	build(k<<1|1,tr[k].mid+1,r);
	pushup(k);
}
int query(int k,int l,int r)
{
	if(tr[k].l==l&&tr[k].r==r) return tr[k].val;
	if(l>tr[k].mid) return query(k<<1|1,l,r);
	else if(r<=tr[k].mid) return query(k<<1,l,r);
	else return query(k<<1,l,tr[k].mid)+query(k<<1|1,tr[k].mid+1,r); 
}
void change(int k,int t,int v)
{
	if(tr[k].l==tr[k].r)
	{
		tr[k].val=v;
		return;
	}
	if(t<=tr[k].mid) change(k<<1,t,v);
	else change(k<<1|1,t,v);
	pushup(k);
}
int solvesum(int x,int y)
{
	int ret=0;
	for(;top[x]!=top[y];x=fa[top[x]])
	{
		if(dep[top[x]]<dep[top[y]]) swap(x,y);
		ret+=query(1,belong[top[x]],belong[x]);
	}
	if(dep[x]<dep[y]) swap(x,y);
	ret+=query(1,belong[y],belong[x]);
	return ret;
}

int main(int argc,char *argv[])
{
	scanf("%d",&n);
	for(int a,b,i=1;i<n;++i)
	{
		scanf("%d%d",&a,&b);
		if(a>b) swap(a,b);
		ins(a,b);
	}
	dfs1(1,0);tim=0;dfs2(1,1);
	build(1,1,n);
	scanf("%d",&m);
	char opt[5];
	int T=m+n-1;
	for(int x,y;T--;)
	{
		scanf("%s%d",opt,&x);
		if(opt[0]=='W') printf("%d\n",solvesum(1,x));
		else
		{
			scanf("%d",&y);
			if(x>y) swap(x,y);
			change(1,belong[y],0);
		}
	}
	return 0;
}

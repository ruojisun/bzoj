#include <algorithm>
#include <cstdio>
#include <cctype>
#define N 1000005
using namespace std;
template<typename T>
inline void Read(T &x)
{
    register char ch=getchar();
    for(x=0;!isdigit(ch);ch=getchar());
    for(;isdigit(ch);x=x*10+ch-'0',ch=getchar());
}
inline int lowbit(int x){return x&(-x);}
int n,c,m,nextt[N],pre[N],col[N],ans[N],tag[N];
struct node
{
    int l,r,id;
}opt[N];
bool cmp(node a,node b){return a.l<b.l;}
inline void update(int x,int v)
{
    for(;x<=n;x+=lowbit(x)) tag[x]+=v;
}
inline int ask(int x)
{
    int ret=0;
    for(;x;x-=lowbit(x)) ret+=tag[x];
    return ret;
}
int Main()
{
    Read(n);
    Read(c);
    Read(m);
    for(int i=1;i<=n;++i) Read(col[i]);
    for(int i=n;i>=1;--i) nextt[i]=pre[col[i]],pre[col[i]]=i;
    for(int i=1;i<=c;++i) if(nextt[pre[i]]) update(nextt[pre[i]],1);
    for(int i=1;i<=m;++i) Read(opt[i].l),Read(opt[i].r),opt[i].id=i;
    sort(opt+1,opt+1+m,cmp);
    int L=1;
    for(int i=1;i<=m;++i)
    {
        while(L<opt[i].l)
        {
            if(nextt[L]) update(nextt[L],-1);
            if(nextt[nextt[L]]) update(nextt[nextt[L]],1);
            L++;
        }
        ans[opt[i].id]=ask(opt[i].r)-ask(opt[i].l-1);
    }
    for(int i=1;i<=m;++i) printf("%d\n",ans[i]);
    return 0;
}
int sb=Main();
int main(int argc,char *argv[]){;}
ï»¿

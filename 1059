#include <cstring>
#include <cstdio>
#include <queue>
#define N 100005
#define inf 0x7fffffff
#define cl(a,b) memset(a,b,sizeof(a))
using namespace std;

int T,n,cnt=1,dep[N],head[N],nextt[N],to[N],flow[N];
inline int min(int a,int b) {return a>b?b:a;}
inline void ins(int u,int v,int f)
{
	nextt[++cnt]=head[u];to[cnt]=v;flow[cnt]=f;head[u]=cnt;
	nextt[++cnt]=head[v];to[cnt]=u;flow[cnt]=0;head[v]=cnt;
}
void init()
{
	cnt=1;
	cl(head,0);
	cl(nextt,0);
}
bool bfs(int S,int T)
{
	cl(dep,-1);
	dep[S]=0;
	queue<int>q;
	q.push(S);
	for(int u;!q.empty();)
	{
		u=q.front();
		q.pop();
		for(int i=head[u];i;i=nextt[i])
		{
			int v=to[i];
			if(dep[v]==-1&&flow[i])
			{
				dep[v]=dep[u]+1;
				if(v==T) return true;
				q.push(v); 
			}
		}
	}
	return false;
}
int dfs(int now,int T,int limit)
{
	if(now==T||!limit) return limit;
	int f,res=0;
	for(int i=head[now];i;i=nextt[i])
	{
		int v=to[i];
		if(dep[v]==dep[now]+1&&flow[i]&&(f=dfs(v,T,min(limit,flow[i]))))
		{
			flow[i]-=f;
			flow[i^1]+=f;
			res+=f;
			limit-=f;
			if(!limit) break;
		}
	}
	if(limit!=res) dep[now]=-1;
	return res;
}
int dinic(int S,int T)
{
	int ret=0;
	for(;bfs(S,T);ret+=dfs(S,T,inf));
	return ret;
}
int main(int argc,char *argv[])
{
	scanf("%d",&T);
	for(int a;T--;)
	{
		scanf("%d",&n);
		int S=0,T=n<<1|1;
		for(int i=1;i<=n;++i)
		 for(int j=1;j<=n;++j)
		 {
		 	scanf("%d",&a);
		 	if(a) ins(i,j+n,1);
		 }
		for(int i=1;i<=n;++i) ins(S,i,1);
		for(int i=n+1;i<=n<<1;++i) ins(i,T,1);
		if(dinic(S,T)==n) puts("Yes");
		else puts("No");
		init();
	}
	return 0;
}

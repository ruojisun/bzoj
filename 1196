#include <algorithm>
#include <cstdio>
#define N 20005

using namespace std;
struct Edge
{
	int x,y,z,id;
	bool operator<(Edge a)const
	{
		return z<a.z;
	}
}e1[N],e2[N];
struct node
{
	int a,b;
	bool operator<(node x)const
	{
		return a<x.a;
	}
}ans[N];
int n,k,m,siz,fa[N];
int find_(int x) {return x==fa[x]?x:fa[x]=find_(fa[x]);}
bool check(int x)
{
	for(int i=1;i<=n;++i) fa[i]=i;
	int num=0;
	for(int i=1;i<=m;++i)
	{
		if(e1[i].z>x) continue;
		int fx=find_(e1[i].x),fy=find_(e1[i].y);
		if(fx!=fy)
		{
			num++;
			fa[fy]=fx;
		}
	}
	if(num<k) return false;
	for(int i=1;i<=m;++i)
	{
		if(e2[i].z>x) continue;
		int fx=find_(e2[i].x),fy=find_(e2[i].y);
		if(fx!=fy)
		{
			fa[fy]=fx;
			num++;
		}
	}
	if(num==n-1) return true;
	return false;
}
int main(int argc,char *argv[])
{
	scanf("%d%d%d",&n,&k,&m);
	int l=1,r=30000,anss;
	for(int u,v,w1,w2,i=1;i<m;++i)
	{
		scanf("%d%d%d%d",&u,&v,&w1,&w2);
		e1[i]=(Edge){u,v,w1,i};
		e2[i]=(Edge){u,v,w2,i};
	}
	sort(e1+1,e1+m+1);
	sort(e2+1,e2+m+1);
	for(int mid;l<=r;)
	{
		mid=(l+r)>>1;
		if(check(mid)) anss=mid,r=mid-1;
		else l=mid+1;
	}
	printf("%d\n",anss);
	return 0;
}

#include <cstdio>
#include <cctype>
#define N 2000000

int n,m,cn,mx,a[N],rt[N],val[N],cnt[N],data[N],fa[N],ch[N][2],siz[N];
inline void read(int &x)
{
	bool f=0;
	register char ch=getchar();
	for(x=0;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;
	for(;isdigit(ch);x=x*10+ch-'0',ch=getchar());
	x=f?-x:x;
}
void clear(int k) {fa[k]=ch[k][0]=ch[k][1]=siz[k]=cnt[k]=data[k]=0;}
inline int son(int x) {return ch[fa[x]][1]==x;}
inline void pushup(int rt)
{
	siz[rt]=cnt[rt];
	if(ch[rt][0]) siz[rt]+=siz[ch[rt][0]];
	if(ch[rt][1]) siz[rt]+=siz[ch[rt][1]];
}
void rotate(int x)
{
	int y=fa[x],z=fa[y],b=son(x);
	if(z) ch[z][ch[z][1]==y]=x;
	fa[x]=z;
	ch[y][b]=ch[x][b^1];
	fa[ch[y][b]]=y;
	ch[x][b^1]=y;
	fa[y]=x;
	pushup(y);pushup(x);
}
void splay(int x,int &rt)
{
	for(int y;y=fa[x];rotate(x))
	 if(fa[y])
	  rotate(son(x)==son(y)?y:x);
	rt=x;
}
void ins(int &rt,int x)
{
	if(!rt)
	{
		rt=++cn;
		clear(cn);
		data[cn]=x;
		siz[cn]=cnt[cn]=1;
		return;
	}
	int f=0,now=rt;
	while("syl is handsome")
	{
		if(x==data[now])
		{
			cnt[now]++;
			pushup(now);
			splay(now,rt);
			return;
		}
		f=now;
		now=ch[now][data[now]<x];
		if(!now)
		{
			cn++;
			clear(cn);
			data[cn]=x;
			cnt[cn]=siz[cn]=1;
			fa[cn]=f;
			ch[f][data[f]<x]=cn;
			pushup(f);
			splay(cn,rt);
			return;
		}
	}
}
void modify(int k,int l,int r,int t,int v)
{
	ins(rt[k],v);
	if(l==r) return;
	int mid=(l+r)>>1;
	if(t<=mid) modify(k<<1,l,mid,t,v);
	else modify(k<<1|1,mid+1,r,t,v);
}
int get_rank(int &rt,int v)
{
	int now=rt,ans=0;
	while("syl is handsome")
	{
		if(!now) return ans;
		if(v<data[now]) now=ch[now][0];
		else
		{
			ans+=ch[now][0]?siz[ch[now][0]]:0;
			if(v==data[now])
			{
				splay(now,rt);
				return ans;
			}
			ans+=cnt[now];
			now=ch[now][1];
		}
	}
}
int solve1(int k,int l,int r,int x,int y,int v)
{
	if(l>=x&&r<=y) return get_rank(rt[k],v);
	int mid=(l+r)>>1,ret=0;
	if(x<=mid) ret+=solve1(k<<1,l,mid,x,y,v);
	if(y>mid) ret+=solve1(k<<1|1,mid+1,r,x,y,v);
	return ret;
}
int solve2(int l,int r,int k)
{
	int L=0,R=mx;
	for(int mid;L<=R;)
	{
		mid=(L+R)>>1;
		if(solve1(1,1,n,l,r,mid)<k) L=mid+1;
		else R=mid-1;
	}
	return L-1;
}
int get_pos(int v,int &rt)
{
	int now=rt;
	while("syl is handsome")
	{
		if(!now) return 0;
		if(data[now]==v)
		{
			splay(now,rt);
			return now;
		}
		if(v<data[now]) now=ch[now][0];
		if(v>data[now]) now=ch[now][1];
	}
}
int pre(int rt)
{
	int now=ch[rt][0];
	while(ch[now][1]) now=ch[now][1];
	return now;
}
int next(int rt)
{
	int now=ch[rt][1];
	while(ch[now][0]) now=ch[now][0];
	return now;
}
void del(int &rt,int x)
{
	splay(x,rt);
	if(cnt[rt]>1)
	{
		cnt[rt]--;
		pushup(rt);
		return;
	}
	if(!ch[rt][1]&&!ch[rt][0])
	{
		clear(rt);rt=0;return;
	}
	if(!ch[rt][1])
	{
		int tmp=rt;
		rt=ch[rt][0];
		fa[rt]=0;
		clear(tmp);
		return;
	}
	if(!ch[rt][0])
	{
		int tmp=rt;
		rt=ch[rt][1];
		fa[rt]=0;
		clear(tmp);
		return;
	}
	int k=pre(rt);int tmp=rt;
	splay(k,rt);
	ch[k][1]=ch[tmp][1];
	fa[ch[k][1]]=k;
	clear(tmp);
	pushup(k);
	return;
}
void solve3(int k,int l,int r,int x,int v)
{
	int p=get_pos(a[x],rt[k]);
	del(rt[k],p);
	ins(rt[k],v);
	if(l==r) return;
	int mid=(l+r)>>1;
	if(x<=mid) solve3(k<<1,l,mid,x,v);
	else solve3(k<<1|1,mid+1,r,x,v);
}
inline int max(int a,int b) {return a>b?a:b;}
int get_pre(int rT,int v)
{
	int now=rt[rT],ans=0;
	while(now)
	{
		if(data[now]<v)
		{
			if(ans<data[now]) ans=data[now];
			now=ch[now][1];
		}
		else now=ch[now][0];
	}
	return ans;
}
int solve4(int k,int l,int r,int x,int y,int v)
{
	if(l==x&&r==y) return get_pre(k,v);
	int mid=(l+r)>>1;
	if(x>mid) return solve4(k<<1|1,mid+1,r,x,y,v);
	else if(y<=mid) return solve4(k<<1,l,mid,x,y,v);
	else return max(solve4(k<<1,l,mid,x,mid,v),solve4(k<<1|1,mid+1,r,mid+1,y,v));
}
int get_suc(int rT,int v)
{
	int now=rt[rT],ans=1000000000;
	while(now)
	{
		if(data[now]>v)
		{
			if(ans>data[now]) ans=data[now];
			now=ch[now][0]; 
		}
		else now=ch[now][1];
	}
	return ans;
}
inline int min(int a,int b) {return a>b?b:a;}
int solve5(int k,int l,int r,int x,int y,int v)
{
	if(l==x&&r==y) return get_suc(k,v);
	int mid=(l+r)>>1;
	if(x>mid) return solve5(k<<1|1,mid+1,r,x,y,v);
	else if(y<=mid) return solve5(k<<1,l,mid,x,y,v);
	else return min(solve5(k<<1,l,mid,x,mid,v),solve5(k<<1|1,mid+1,r,mid+1,y,v));
}
int main(int argc,char *argv[])
{
	read(n);read(m);
	for(int i=1;i<=n;++i) read(a[i]),mx=max(mx,a[i]);
	for(int i=1;i<=n;++i)
	modify(1,1,n,i,a[i]);
	for(int opt,l,r,k;m--;)
	{
		read(opt),read(l),read(r);
		if(opt!=3) read(k);
		if(opt==1) printf("%d\n",solve1(1,1,n,l,r,k)+1);
		else if(opt==2) printf("%d\n",solve2(l,r,k));
		else if(opt==3) {solve3(1,1,n,l,r);mx=max(mx,r);a[l]=r;}
		else if(opt==4) printf("%d\n",solve4(1,1,n,l,r,k));
		else if(opt==5) printf("%d\n",solve5(1,1,n,l,r,k));
	}
	return 0;
}
